#pragma kernel CSMain

RWTexture2D<float4> Result;
float4 Result_TexelSize;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{

    float2 co = float2(id.x, id.y);
    float real1 = frac(sin(dot(co, float2(12.9898, 78.233) * 2.0)) * 43758.5453);
    float real2 = frac(sin(dot(co, float2(13.9898, 78.233) * 2.0)) * 43758.5453);
    float real3 = frac(sin(dot(co, float2(12.9898, 78.233) * 2.0)) * 47758.5453);
    float real4 = frac(sin(dot(co, float2(12.3898, 78.243) * 2.0)) * 48788.5453);
    float real5 = frac(sin(dot(co, float2(11.3838, 78.243) * 2.0)) * 48738.5453);


    int i = id.x + Result_TexelSize.z * id.y;


    if (real4 + real5 > 1.983)
    {
        Result[id.xy] = float4(real1, real2, real3, 1);
    }
    else 
    {
        Result[id.xy] = float4(0, 0, 0, 0);
    }
}

uint2 wrap(uint2 u)
{
    //TODO: seems to not work properly whewn wrapping around the negative to positive way?
    return uint2(u.x % Result_TexelSize.z, u.y % Result_TexelSize.z);
}

#pragma kernel GameOfLife
RWTexture2D<float4> Prev;
RWBuffer<int> done;
RWTexture2D<float4> Perlin;

[numthreads(8, 8, 1)]
void GameOfLife(uint3 id : SV_DispatchThreadID)
{
    float4 sum = Prev[wrap(id.xy + uint2(0, 1))] + Prev[wrap(id.xy + uint2(0, -1))] + Prev[wrap(id.xy + uint2(1, 0))] + Prev[wrap(id.xy + uint2(-1, 0))];
    float count = floor(Prev[wrap(id.xy + uint2(0, 1))].w) + floor(Prev[wrap(id.xy + uint2(0, -1))].w) + floor(Prev[wrap(id.xy + uint2(1, 0))].w) + floor(Prev[wrap(id.xy + uint2(-1, 0))].w);
    float4 avg = sum / count;

    int currentVal = Prev[id.xy].w;
    if (currentVal == 1)
    {
        Result[id.xy] = Prev[id.xy];
    }
    else if (count == 0) 
    {
        Result[id.xy] = float4(0, 0, 0, 0);
    }
    else
    {
        float newVal = Prev[id.xy].w + Perlin[id.xy].z;
        done[0] = newVal;
        if (newVal >= 1)
        {
            Result[id.xy] = float4(avg.xyz, 1);
        }
        else 
        {
            Result[id.xy] = float4(0, 0, 0, newVal);
        }
    }
}



#pragma kernel Oceans
RWTexture2D<float4> Continents;

[numthreads(8, 8, 1)]
void Oceans(uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = round(Continents[id.xy].z - 0.2);
}


#pragma kernel Volcanism
RWTexture2D<float4> Plates;
RWTexture2D<float4> VolcanismResult;

[numthreads(8, 8, 1)]
void Volcanism(uint3 id : SV_DispatchThreadID)
{
    float sum = Plates[wrap(id.xy + uint2(0, 1))].y - Plates[wrap(id.xy + uint2(0, -1))].y + Plates[wrap(id.xy + uint2(1, 0))].z - Plates[wrap(id.xy + uint2(-1, 0))].z;
    VolcanismResult[id.xy] = float4(sum, sum, sum, sum);
}


#pragma kernel AddTextures
RWTexture2D<float4> Input1;
RWTexture2D<float4> Input2;
RWTexture2D<float4> Output;

[numthreads(8, 8, 1)]
void AddTextures(uint3 id : SV_DispatchThreadID)
{
    Output[id.xy] = Input1[id.xy] + Input2[id.xy];
}
